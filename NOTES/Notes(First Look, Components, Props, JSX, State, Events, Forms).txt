Why do we even need frontend frameworks:
    1. Keeping user interfaces in sync with data is a lot of hard work, frontend frameworks take this hardwork away from 
        developers.
    2. Frontend frameworks enforce a correct way of structuring and writing code.
    3. They give developers and teams a consistent way of building frontend applications.

    React is an extremely popular, declarative, component-based, state-driven javascript library for building user-interfaces,
    created by facebook.

    React is a library and not a framework because its only the view layer. We need multiple external libraries to build a 
    complete application. Next.js and Remix on the other hand are some frameworks written on top of react.

Components:

    Components are small pieces of UI with their own data, logic and appearance. 
    We build complex UI's by building multiple components and combining them. 
    Components can be resued, nested inside each other, and pass data between them.

JSX:
    Declarative syntax to describe how the components look and behave.

Separation of Concerns:
    In the tradition vanilla js, separation of concerns were one technology per file. HTML, CSS and Javascript
    were all in separate files. 
    In react, separation of concerns have changed to one component per file. A component can have a mix of 
    HTML(JSX), Javscript and CSS but components are still separated across files.

Props:
    Props are used to transfer data from parent to child components.
    They are an essential tool to configure and customize components.
    Props are immuatble. They cannot be changed and are read only.
    If you need to mutate props you actually need state.
    React follows one way data flow. Data can flow only from top to bottom. Angular has two-way data flow.

Foreach function does not work in place of map because foreach does not return a new array. And an array of JSX 
elements is required which can be rendered.
If condition and For loop cannot be used inside javascript mode. Instead use ternary, short circuting and map.

You can also do multiple returns from the same function using if else statements.

Instead of passing props directly into the functional component, its a good idea to pass props using destructuring.

React Fragment
Instead of wrapping a bunch of components inside a div which will then mess up the dom tree. We can wrap the 
components inside a fragment. A fragment can be created by using <React.Fragment></React.Fragment> tag or <></>
an empty tag.
    
Events and States

In event methods like onClick DO NOT call a function directly. Instead pass a function value otherwise the function will
be executed immediately upon loading the app.

Data that the component can hold over time, necessary for the information that it needs to remember throughout 
the app's lifecycle.
It is the component's memory.

Component State : 
    Single local component variable. (Piece of State)
    Updating component state triggers React to re-render the component.

    useState() is a react hook. Hooks can only be called on the top level of the function.
    useState() can also not be called in any other control flow. They must be called in isolation at the top level
    of the function.

    State is preserved throughout component rendering/re-rendering unless component completely disappears from
    the view which is called unmounting. When the state changes, the component re-renders.

    If we want to update state based on the current state. Pass in a callback function with current state as the argument
    instead of directly changing the state inside the setState function.

    Each component has and manages its own state. State is isolated inside each component. With state we view UI as
    the reflection of data changing over time.

Controlled Elements: 
    Controlled Elements are elements related to a form like input and submit button and how we handle
    the values related to them.

State vs Props
    State is owned by the component. Props is owned by the parent. A change in props causes the component to rerender.
    And similarly a change in state also causes the component to rerender. 

In React you are not supposed to mutate the original state and instead return a new state everytime you want to 
change the state.

If one or two sibling components need to use a state, we should lift the state to the common parent component
and then pass it down to the relevant children.

Derived state is the state that is computed from an existing piece of state or from props. If you already have
the data to compute a value, compute it in that component using constant variables. Don't use more state variables.

Everytime you need to do operartion on items array, don't mutate the original array and instead create a copy using 
slice.